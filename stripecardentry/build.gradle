apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'android-apt'

group = 'com.rethoughtsolutions.stripecardentry'
version = '1.0.0'

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.2"

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 25
    versionCode 1
    versionName "${version}"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }
}

dependencies {
  compile 'com.android.support:support-annotations:25.1.0'
}

def siteUrl = 'https://github.com/tomjhall/StripeCardEntry'
def gitUrl = 'https://github.com/tomjhall/StripeCardEntry.git'


bintray {
  //Initialise bintray user/api_key from local.properties file
  Properties properties = new Properties()
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
  user = properties.getProperty('bintray.user')
  key = properties.getProperty('bintray.apikey')

  configurations = ['archives'] //When uploading configuration files
  pkg {
    repo = 'Maven'
    name = 'StripeCardEntry'
    desc = 'Brings the simple stripe credit card entry UI to the Android platform'
    websiteUrl = siteUrl
    issueTrackerUrl = 'https://github.com/tomjhall/StripeCardEntry/issues'
    vcsUrl = gitUrl
    licenses = ['Apache-2.0']
    labels = ['aar', 'android']
    publicDownloadNumbers = false
  }
}

install {
  repositories.mavenInstaller {
    pom {
      project {
        packaging 'aar'
        name 'StripeCardEntry'
        url siteUrl
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id 'tomjhall'
            name 'Tom Hall'
            email 'tom_j_hall@hotmail.com'
          }
        }
        scm {
          connection gitUrl
          developerConnection gitUrl
          url siteUrl
        }
      }
    }
  }
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
  javadoc.classpath += files(android.libraryVariants.collect { variant ->
    variant.javaCompile.classpath.files
  })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

task findConventions << {
  println project.getConvention()
}
